{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "HRMS Backend Express API Swagger",
        "description": "This is a backened REST API application made with Express.",
        "license": {
            "name": "MIT",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/",
    "tags": [
        {
            "name": "User",
            "description": "API's for User management"
        },
        {
            "name": "Employee",
            "description": "API's for Employee management"
        },
        {
            "name": "Admin",
            "description": "API's for Admin management"
        },
        {
            "name": "OTP",
            "description": "API's for OTP"
        },
        {
            "name": "Payment",
            "description": "API's for Payment"
        }
    ],
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/user/login-user": {
            "post": {
                "summary": "Login user by email and password",
                "tags": [
                    "User"
                ],
                "description": "login user",
                "parameters": [
                    {
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "description": "User req.body fields",
                        "schema": {
                            "$ref": "#/definitions/UserLogin"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Login user by email and password",
                        "schema": {
                            "$ref": "#/definitions/UserLogin"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/save-user": {
            "post": {
                "summary": "To register new user",
                "tags": [
                    "User"
                ],
                "description": "Create new user in system as a User",
                "parameters": [
                    {
                        "name": "SaveUser",
                        "in": "body",
                        "required": true,
                        "description": "User req.body fields",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "New Parent created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/get-user": {
            "get": {
                "summary": "To all User list",
                "tags": [
                    "User"
                ],
                "description": "Fetch all User",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Get All User",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/get-user-by-id/{userId}": {
            "get": {
                "summary": "Get User by id",
                "tags": [
                    "User"
                ],
                "description": "Fetch User by ID",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "description": "User id to fetch details"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Get User by ID",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/delete-user-by-id/{userId}": {
            "get": {
                "summary": "Delete User by id",
                "tags": [
                    "User"
                ],
                "description": "Delete User by ID",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "description": "User id to Delete"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Delete User by ID",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/update-user": {
            "post": {
                "summary": "Update existing User By Using ID",
                "tags": [
                    "User"
                ],
                "description": "Update User",
                "parameters": [
                    {
                        "name": "UpdateUser",
                        "in": "body",
                        "required": true,
                        "description": "User req.body fields",
                        "schema": {
                            "$ref": "#/definitions/updateUser"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Update User",
                        "schema": {
                            "$ref": "#/definitions/updateUser"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/employee/save-employee": {
            "post": {
                "summary": "To register new Employee",
                "tags": [
                    "Employee"
                ],
                "description": "Create new user in system as a Employee",
                "parameters": [
                    {
                        "name": "SaveEmployee",
                        "in": "body",
                        "required": true,
                        "description": "Employee req.body fields",
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "New Parent created",
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/employee/get-employee": {
            "get": {
                "summary": "To all Employee list",
                "tags": [
                    "Employee"
                ],
                "description": "Fetch all Employee",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Get All Employee",
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/employee/get-employee-by-id/{employeeId}": {
            "get": {
                "summary": "Get Employee by id",
                "tags": [
                    "Employee"
                ],
                "description": "Fetch empolyee by ID",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "path",
                        "required": true,
                        "description": "Employee id to fetch details"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Get employee by ID",
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/employee/delete-employee-by-id/{employeeId}": {
            "get": {
                "summary": "Delete Employee by id",
                "tags": [
                    "Employee"
                ],
                "description": "Delete empolyee by ID",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "path",
                        "required": true,
                        "description": "Employee id to Delete"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Delete employee by ID",
                        "schema": {
                            "$ref": "#/definitions/Employee"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/employee/update-employee": {
            "post": {
                "summary": "Update existing Employee By Using ID",
                "tags": [
                    "Employee"
                ],
                "description": "Update Employee",
                "parameters": [
                    {
                        "name": "UpdateEmployee",
                        "in": "body",
                        "required": true,
                        "description": "Employee req.body fields",
                        "schema": {
                            "$ref": "#/definitions/updateEmployee"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Update Employee",
                        "schema": {
                            "$ref": "#/definitions/updateEmployee"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "UserLogin": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "User": {
            "properties": {
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "mobile": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "updateUser": {
            "properties": {
                "empId": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "mobile": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "Employee": {
            "properties": {
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "mobile": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "updateEmployee": {
            "properties": {
                "empId": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "mobile": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}